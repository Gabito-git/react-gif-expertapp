{"version":3,"sources":["components/CategoryAdd.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","cat","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAoBhD,OACI,sBAAMC,SAXa,SAAEC,GAErBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAe,MAKnB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SArBa,SAACP,GAEtBF,EAAeE,EAAEQ,OAAOF,a,QCTnBG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAErC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,kCAAMA,EAAN,W,uBCNCK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,iDACoCO,UAAWF,GAD/C,+DAGAG,MAAOR,GAHP,cAGbS,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EAEzB,MAAM,CACFhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAXvB,kBAgBZY,GAhBY,4CAAH,sDCIPK,EAAW,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECAd,SAAEA,GAAc,IAAD,EAEbrB,mBAAS,CAC/B2B,KAAM,GACNO,SAAS,IAJ0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAkBvC,OAXAC,qBAAW,WAEPjB,EAASC,GACJiB,MAAM,SAAAC,GAAI,OAAIH,EAAU,CACrBT,KAAMY,EACNL,SAAS,SAGnB,CAACb,IAGIc,EDfyBK,CAAcnB,GAAlCU,EAH0B,EAG/BJ,KAAaO,EAHkB,EAGlBA,QAEpB,OACI,qCACA,mCAAOb,EAAP,QAEEa,GAAW,4CAEb,qBAAKjB,UAAU,YAAf,SAGQc,EAAOF,KAAK,SAAAC,GACR,OAEI,cAAC,EAAD,eAESA,GADCA,EAAIhB,aEjBzB2B,EAAe,WAAO,IAAD,EAEMzC,mBAAS,CAAC,cAFhB,mBAEvB0C,EAFuB,KAEX3C,EAFW,KAI9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BACM2C,EAAWb,KAAK,SAAAc,GAAG,OAAI,cAAC,EAAD,CAErBtB,SAAWsB,GADLA,Y,MCX1BC,IAASC,OAEL,cAAC,EAAD,IAEDC,SAASC,eAAe,W","file":"static/js/main.cdac0343.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const CategoryAdd = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputValue = (e) =>{\r\n\r\n        setInputValue( e.target.value );\r\n\r\n    }\r\n\r\n    const handleOnSubmit = ( e )=> {\r\n\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2 ){\r\n            setCategories( cats => [inputValue,...cats ] );\r\n            setInputValue( '' );\r\n        }\r\n    }   \r\n\r\n    return (\r\n        <form onSubmit={ handleOnSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputValue }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nCategoryAdd.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={ url } alt={ title }/>\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","export const getGifs = async( category )=>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )  }&limit=10&api_key=JhHDwmH9SWIYwCdxqcUChXBz5Dc6KLQp`;\r\n    \r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img =>{\r\n\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url                 // EL signo de interrogación es preguntando si vienen imágenes\r\n        }\r\n\r\n    } );    \r\n    \r\n    return gifs;\r\n}","\r\nimport { GifGridItem } from \"./GifGridItem\";\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid =  ( {category} ) => {\r\n    \r\n\r\n    const {data:images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n        <h3> { category }  </h3> \r\n\r\n        { loading && <p>Cargando...</p>}\r\n\r\n        <div className=\"card-grid\">\r\n           \r\n            {\r\n                images.map( img => {\r\n                    return (\r\n                        \r\n                        <GifGridItem \r\n                            key={ img.id }\r\n                            { ...img }                            \r\n                        />)\r\n                } )\r\n                \r\n            }\r\n                    \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = ( category )=> {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    }) ;\r\n\r\n    useEffect( ()=>{\r\n\r\n        getGifs( category )\r\n            .then( imgs => setstate( {\r\n                data: imgs,\r\n                loading: false\r\n            } ) )\r\n\r\n    },[category]); \r\n\r\n\r\n    return state;\r\n\r\n}  ","import { useState } from 'react';\r\nimport { CategoryAdd } from './components/CategoryAdd';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n    \r\n    return (\r\n        <>\r\n            <h1>GifExpertApp</h1>\r\n            <CategoryAdd setCategories={ setCategories } />\r\n            <hr/>           \r\n\r\n            <ol>\r\n                { categories.map( cat => <GifGrid \r\n                    key={ cat } \r\n                    category={ cat }\r\n                     />  \r\n                 ) }             \r\n\r\n            </ol>\r\n\r\n        </>\r\n        \r\n    );\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n   document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}